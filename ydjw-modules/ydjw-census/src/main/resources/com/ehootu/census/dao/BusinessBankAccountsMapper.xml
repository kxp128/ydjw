<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ehootu.census.dao.BusinessBankAccountsMapper">
  <resultMap id="BaseResultMap" type="com.ehootu.census.model.BusinessBankAccounts">
    <id column="business_bank_id" jdbcType="INTEGER" property="businessBankId" />
    <result column="business_id" jdbcType="INTEGER" property="businessId" />
    <result column="bank_user" jdbcType="VARCHAR" property="bankUser" />
    <result column="bank_name" jdbcType="VARCHAR" property="bankName" />
    <result column="open_account_area" jdbcType="VARCHAR" property="openAccountArea" />
    <result column="bank_branch" jdbcType="VARCHAR" property="bankBranch" />
    <result column="bank_number" jdbcType="VARCHAR" property="bankNumber" />
    <result column="created" jdbcType="INTEGER" property="created" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    business_bank_id, business_id, bank_user, bank_name, open_account_area, bank_branch, 
    bank_number, created
  </sql>
  <select id="selectByExample" parameterType="com.ehootu.census.model.BusinessBankAccountsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from business_bank_accounts
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from business_bank_accounts
    where business_bank_id = #{businessBankId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from business_bank_accounts
    where business_bank_id = #{businessBankId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.ehootu.census.model.BusinessBankAccountsExample">
    delete from business_bank_accounts
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ehootu.census.model.BusinessBankAccounts">
    insert into business_bank_accounts (business_bank_id, business_id, bank_user, 
      bank_name, open_account_area, bank_branch, 
      bank_number, created)
    values (#{businessBankId,jdbcType=INTEGER}, #{businessId,jdbcType=INTEGER}, #{bankUser,jdbcType=VARCHAR}, 
      #{bankName,jdbcType=VARCHAR}, #{openAccountArea,jdbcType=VARCHAR}, #{bankBranch,jdbcType=VARCHAR}, 
      #{bankNumber,jdbcType=VARCHAR}, #{created,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.ehootu.census.model.BusinessBankAccounts">
    insert into business_bank_accounts
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="businessBankId != null">
        business_bank_id,
      </if>
      <if test="businessId != null">
        business_id,
      </if>
      <if test="bankUser != null">
        bank_user,
      </if>
      <if test="bankName != null">
        bank_name,
      </if>
      <if test="openAccountArea != null">
        open_account_area,
      </if>
      <if test="bankBranch != null">
        bank_branch,
      </if>
      <if test="bankNumber != null">
        bank_number,
      </if>
      <if test="created != null">
        created,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="businessBankId != null">
        #{businessBankId,jdbcType=INTEGER},
      </if>
      <if test="businessId != null">
        #{businessId,jdbcType=INTEGER},
      </if>
      <if test="bankUser != null">
        #{bankUser,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="openAccountArea != null">
        #{openAccountArea,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="bankNumber != null">
        #{bankNumber,jdbcType=VARCHAR},
      </if>
      <if test="created != null">
        #{created,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ehootu.census.model.BusinessBankAccountsExample" resultType="java.lang.Long">
    select count(*) from business_bank_accounts
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update business_bank_accounts
    <set>
      <if test="record.businessBankId != null">
        business_bank_id = #{record.businessBankId,jdbcType=INTEGER},
      </if>
      <if test="record.businessId != null">
        business_id = #{record.businessId,jdbcType=INTEGER},
      </if>
      <if test="record.bankUser != null">
        bank_user = #{record.bankUser,jdbcType=VARCHAR},
      </if>
      <if test="record.bankName != null">
        bank_name = #{record.bankName,jdbcType=VARCHAR},
      </if>
      <if test="record.openAccountArea != null">
        open_account_area = #{record.openAccountArea,jdbcType=VARCHAR},
      </if>
      <if test="record.bankBranch != null">
        bank_branch = #{record.bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="record.bankNumber != null">
        bank_number = #{record.bankNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.created != null">
        created = #{record.created,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update business_bank_accounts
    set business_bank_id = #{record.businessBankId,jdbcType=INTEGER},
      business_id = #{record.businessId,jdbcType=INTEGER},
      bank_user = #{record.bankUser,jdbcType=VARCHAR},
      bank_name = #{record.bankName,jdbcType=VARCHAR},
      open_account_area = #{record.openAccountArea,jdbcType=VARCHAR},
      bank_branch = #{record.bankBranch,jdbcType=VARCHAR},
      bank_number = #{record.bankNumber,jdbcType=VARCHAR},
      created = #{record.created,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ehootu.census.model.BusinessBankAccounts">
    update business_bank_accounts
    <set>
      <if test="businessId != null">
        business_id = #{businessId,jdbcType=INTEGER},
      </if>
      <if test="bankUser != null">
        bank_user = #{bankUser,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        bank_name = #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="openAccountArea != null">
        open_account_area = #{openAccountArea,jdbcType=VARCHAR},
      </if>
      <if test="bankBranch != null">
        bank_branch = #{bankBranch,jdbcType=VARCHAR},
      </if>
      <if test="bankNumber != null">
        bank_number = #{bankNumber,jdbcType=VARCHAR},
      </if>
      <if test="created != null">
        created = #{created,jdbcType=INTEGER},
      </if>
    </set>
    where business_bank_id = #{businessBankId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ehootu.census.model.BusinessBankAccounts">
    update business_bank_accounts
    set business_id = #{businessId,jdbcType=INTEGER},
      bank_user = #{bankUser,jdbcType=VARCHAR},
      bank_name = #{bankName,jdbcType=VARCHAR},
      open_account_area = #{openAccountArea,jdbcType=VARCHAR},
      bank_branch = #{bankBranch,jdbcType=VARCHAR},
      bank_number = #{bankNumber,jdbcType=VARCHAR},
      created = #{created,jdbcType=INTEGER}
    where business_bank_id = #{businessBankId,jdbcType=INTEGER}
  </update>
</mapper>