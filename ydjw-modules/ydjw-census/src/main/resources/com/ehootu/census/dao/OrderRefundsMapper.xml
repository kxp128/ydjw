<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ehootu.census.dao.OrderRefundsMapper">
  <resultMap id="BaseResultMap" type="com.ehootu.census.model.OrderRefunds">
    <id column="order_refund_id" jdbcType="INTEGER" property="orderRefundId" />
    <result column="order_id" jdbcType="INTEGER" property="orderId" />
    <result column="refund_to" jdbcType="INTEGER" property="refundTo" />
    <result column="order_sn" jdbcType="VARCHAR" property="orderSn" />
    <result column="refund_trade_no" jdbcType="VARCHAR" property="refundTradeNo" />
    <result column="refund_remark" jdbcType="VARCHAR" property="refundRemark" />
    <result column="refund_time" jdbcType="INTEGER" property="refundTime" />
    <result column="back_money" jdbcType="DECIMAL" property="backMoney" />
    <result column="refund_status" jdbcType="TINYINT" property="refundStatus" />
    <result column="refund_msg" jdbcType="VARCHAR" property="refundMsg" />
    <result column="refund_info" jdbcType="VARCHAR" property="refundInfo" />
    <result column="created" jdbcType="INTEGER" property="created" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    order_refund_id, order_id, refund_to, order_sn, refund_trade_no, refund_remark, refund_time, 
    back_money, refund_status, refund_msg, refund_info, created
  </sql>
  <select id="selectByExample" parameterType="com.ehootu.census.model.OrderRefundsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from order_refunds
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from order_refunds
    where order_refund_id = #{orderRefundId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from order_refunds
    where order_refund_id = #{orderRefundId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.ehootu.census.model.OrderRefundsExample">
    delete from order_refunds
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ehootu.census.model.OrderRefunds">
    insert into order_refunds (order_refund_id, order_id, refund_to, 
      order_sn, refund_trade_no, refund_remark, 
      refund_time, back_money, refund_status, 
      refund_msg, refund_info, created
      )
    values (#{orderRefundId,jdbcType=INTEGER}, #{orderId,jdbcType=INTEGER}, #{refundTo,jdbcType=INTEGER}, 
      #{orderSn,jdbcType=VARCHAR}, #{refundTradeNo,jdbcType=VARCHAR}, #{refundRemark,jdbcType=VARCHAR}, 
      #{refundTime,jdbcType=INTEGER}, #{backMoney,jdbcType=DECIMAL}, #{refundStatus,jdbcType=TINYINT}, 
      #{refundMsg,jdbcType=VARCHAR}, #{refundInfo,jdbcType=VARCHAR}, #{created,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.ehootu.census.model.OrderRefunds">
    insert into order_refunds
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="orderRefundId != null">
        order_refund_id,
      </if>
      <if test="orderId != null">
        order_id,
      </if>
      <if test="refundTo != null">
        refund_to,
      </if>
      <if test="orderSn != null">
        order_sn,
      </if>
      <if test="refundTradeNo != null">
        refund_trade_no,
      </if>
      <if test="refundRemark != null">
        refund_remark,
      </if>
      <if test="refundTime != null">
        refund_time,
      </if>
      <if test="backMoney != null">
        back_money,
      </if>
      <if test="refundStatus != null">
        refund_status,
      </if>
      <if test="refundMsg != null">
        refund_msg,
      </if>
      <if test="refundInfo != null">
        refund_info,
      </if>
      <if test="created != null">
        created,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="orderRefundId != null">
        #{orderRefundId,jdbcType=INTEGER},
      </if>
      <if test="orderId != null">
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="refundTo != null">
        #{refundTo,jdbcType=INTEGER},
      </if>
      <if test="orderSn != null">
        #{orderSn,jdbcType=VARCHAR},
      </if>
      <if test="refundTradeNo != null">
        #{refundTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="refundRemark != null">
        #{refundRemark,jdbcType=VARCHAR},
      </if>
      <if test="refundTime != null">
        #{refundTime,jdbcType=INTEGER},
      </if>
      <if test="backMoney != null">
        #{backMoney,jdbcType=DECIMAL},
      </if>
      <if test="refundStatus != null">
        #{refundStatus,jdbcType=TINYINT},
      </if>
      <if test="refundMsg != null">
        #{refundMsg,jdbcType=VARCHAR},
      </if>
      <if test="refundInfo != null">
        #{refundInfo,jdbcType=VARCHAR},
      </if>
      <if test="created != null">
        #{created,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ehootu.census.model.OrderRefundsExample" resultType="java.lang.Long">
    select count(*) from order_refunds
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update order_refunds
    <set>
      <if test="record.orderRefundId != null">
        order_refund_id = #{record.orderRefundId,jdbcType=INTEGER},
      </if>
      <if test="record.orderId != null">
        order_id = #{record.orderId,jdbcType=INTEGER},
      </if>
      <if test="record.refundTo != null">
        refund_to = #{record.refundTo,jdbcType=INTEGER},
      </if>
      <if test="record.orderSn != null">
        order_sn = #{record.orderSn,jdbcType=VARCHAR},
      </if>
      <if test="record.refundTradeNo != null">
        refund_trade_no = #{record.refundTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="record.refundRemark != null">
        refund_remark = #{record.refundRemark,jdbcType=VARCHAR},
      </if>
      <if test="record.refundTime != null">
        refund_time = #{record.refundTime,jdbcType=INTEGER},
      </if>
      <if test="record.backMoney != null">
        back_money = #{record.backMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.refundStatus != null">
        refund_status = #{record.refundStatus,jdbcType=TINYINT},
      </if>
      <if test="record.refundMsg != null">
        refund_msg = #{record.refundMsg,jdbcType=VARCHAR},
      </if>
      <if test="record.refundInfo != null">
        refund_info = #{record.refundInfo,jdbcType=VARCHAR},
      </if>
      <if test="record.created != null">
        created = #{record.created,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update order_refunds
    set order_refund_id = #{record.orderRefundId,jdbcType=INTEGER},
      order_id = #{record.orderId,jdbcType=INTEGER},
      refund_to = #{record.refundTo,jdbcType=INTEGER},
      order_sn = #{record.orderSn,jdbcType=VARCHAR},
      refund_trade_no = #{record.refundTradeNo,jdbcType=VARCHAR},
      refund_remark = #{record.refundRemark,jdbcType=VARCHAR},
      refund_time = #{record.refundTime,jdbcType=INTEGER},
      back_money = #{record.backMoney,jdbcType=DECIMAL},
      refund_status = #{record.refundStatus,jdbcType=TINYINT},
      refund_msg = #{record.refundMsg,jdbcType=VARCHAR},
      refund_info = #{record.refundInfo,jdbcType=VARCHAR},
      created = #{record.created,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ehootu.census.model.OrderRefunds">
    update order_refunds
    <set>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="refundTo != null">
        refund_to = #{refundTo,jdbcType=INTEGER},
      </if>
      <if test="orderSn != null">
        order_sn = #{orderSn,jdbcType=VARCHAR},
      </if>
      <if test="refundTradeNo != null">
        refund_trade_no = #{refundTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="refundRemark != null">
        refund_remark = #{refundRemark,jdbcType=VARCHAR},
      </if>
      <if test="refundTime != null">
        refund_time = #{refundTime,jdbcType=INTEGER},
      </if>
      <if test="backMoney != null">
        back_money = #{backMoney,jdbcType=DECIMAL},
      </if>
      <if test="refundStatus != null">
        refund_status = #{refundStatus,jdbcType=TINYINT},
      </if>
      <if test="refundMsg != null">
        refund_msg = #{refundMsg,jdbcType=VARCHAR},
      </if>
      <if test="refundInfo != null">
        refund_info = #{refundInfo,jdbcType=VARCHAR},
      </if>
      <if test="created != null">
        created = #{created,jdbcType=INTEGER},
      </if>
    </set>
    where order_refund_id = #{orderRefundId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ehootu.census.model.OrderRefunds">
    update order_refunds
    set order_id = #{orderId,jdbcType=INTEGER},
      refund_to = #{refundTo,jdbcType=INTEGER},
      order_sn = #{orderSn,jdbcType=VARCHAR},
      refund_trade_no = #{refundTradeNo,jdbcType=VARCHAR},
      refund_remark = #{refundRemark,jdbcType=VARCHAR},
      refund_time = #{refundTime,jdbcType=INTEGER},
      back_money = #{backMoney,jdbcType=DECIMAL},
      refund_status = #{refundStatus,jdbcType=TINYINT},
      refund_msg = #{refundMsg,jdbcType=VARCHAR},
      refund_info = #{refundInfo,jdbcType=VARCHAR},
      created = #{created,jdbcType=INTEGER}
    where order_refund_id = #{orderRefundId,jdbcType=INTEGER}
  </update>
</mapper>